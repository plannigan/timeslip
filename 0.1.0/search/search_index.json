{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TimeSlip: Time manipulation for JVM test cases \u00b6 TimeSlip allows test cases to manipulate time by providing a concrete java.time.Clock implementation that will operate in a deterministic way, independent of the actual passage of time. The TimeSlip API is specifically designed to be easy to use from Kotlin and Java code. Examples \u00b6 fun formatTime ( clock : Clock ) = DateTimeFormatter . ISO_TIME . withZone ( clock . zone ). format ( clock . instant ()) val constClock = TimeSlip . at ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" )) println ( formatTime ( constClock )) println ( formatTime ( constClock )) println ( formatTime ( constClock )) // 10:15:30Z // 10:15:30Z // 10:15:30Z val tickingClock = TimeSlip . startAt ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" )) println ( formatTime ( tickingClock )) println ( formatTime ( tickingClock )) println ( formatTime ( tickingClock )) // 10:15:30Z // 10:15:31Z // 10:15:32Z val sequenceClock = TimeSlip . sequence { first ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" )) then ( Instant . parse ( \"2007-12-03T10:16:00.00Z\" ), Instant . parse ( \"2007-12-03T10:17:00.00Z\" )) } println ( formatTime ( sequenceClock )) println ( formatTime ( sequenceClock )) println ( formatTime ( sequenceClock )) // 10:15:30Z // 10:16:00Z // 10:17:00Z Where to Start? \u00b6 To learn the basics of how to start using TimeSlip, read the Getting Started page. Detailed Documentation \u00b6 To learn more about the various ways TimeSlip can be configured, read the Usage Guide page. API Reference \u00b6 To find specific information about a specific function, read the API Reference . Most of the API exists on the TimeSlip page.","title":"Home"},{"location":"#timeslip-time-manipulation-for-jvm-test-cases","text":"TimeSlip allows test cases to manipulate time by providing a concrete java.time.Clock implementation that will operate in a deterministic way, independent of the actual passage of time. The TimeSlip API is specifically designed to be easy to use from Kotlin and Java code.","title":"TimeSlip: Time manipulation for JVM test cases"},{"location":"#examples","text":"fun formatTime ( clock : Clock ) = DateTimeFormatter . ISO_TIME . withZone ( clock . zone ). format ( clock . instant ()) val constClock = TimeSlip . at ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" )) println ( formatTime ( constClock )) println ( formatTime ( constClock )) println ( formatTime ( constClock )) // 10:15:30Z // 10:15:30Z // 10:15:30Z val tickingClock = TimeSlip . startAt ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" )) println ( formatTime ( tickingClock )) println ( formatTime ( tickingClock )) println ( formatTime ( tickingClock )) // 10:15:30Z // 10:15:31Z // 10:15:32Z val sequenceClock = TimeSlip . sequence { first ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" )) then ( Instant . parse ( \"2007-12-03T10:16:00.00Z\" ), Instant . parse ( \"2007-12-03T10:17:00.00Z\" )) } println ( formatTime ( sequenceClock )) println ( formatTime ( sequenceClock )) println ( formatTime ( sequenceClock )) // 10:15:30Z // 10:16:00Z // 10:17:00Z","title":"Examples"},{"location":"#where-to-start","text":"To learn the basics of how to start using TimeSlip, read the Getting Started page.","title":"Where to Start?"},{"location":"#detailed-documentation","text":"To learn more about the various ways TimeSlip can be configured, read the Usage Guide page.","title":"Detailed Documentation"},{"location":"#api-reference","text":"To find specific information about a specific function, read the API Reference . Most of the API exists on the TimeSlip page.","title":"API Reference"},{"location":"getting-started/","text":"Getting started \u00b6 Installation \u00b6 Releases are published to bintray jcenter . It can be included in your project by including the following in your project's build configuration. Gradle dependencies { testImplementation 'com.hypercubetools:timeslip:0.1.0' } Maven <dependency> <groupId>com.hypercubetools</groupId> <artifactId>timeslip</artifactId> <version>0.1.0</version> <type>pom</type> </dependency> Usage Examples \u00b6 Let's look at a class that uses a Clock in it's implementation. Kotlin import java.time.Clock import java.time.LocalDateTime import java.time.format.DateTimeFormatter import java.time.temporal.ChronoField class Greeter ( private val _clock : Clock = Clock . systemDefaultZone ()) { fun sayHello ( name : String ) = if ( beforeNoon ()) \"Morning $name\" else \"Afternoon $name\" fun displayTime () = println ( DateTimeFormatter . ISO_TIME . withZone ( _clock . zone ). format ( _clock . instant ())) private fun beforeNoon () = LocalDateTime . ofInstant ( _clock . instant (), _clock . zone ). get ( ChronoField . AMPM_OF_DAY ) == 0 } Java import java.time.Clock ; import java.time.LocalDateTime ; import java.time.temporal.ChronoField ; class Greeter { private final Clock _clock ; public Greeter () { this ( Clock . systemDefaultZone ()); } public Greeter ( Clock clock ) { _clock = clock ; } public String sayHello ( String name ) { if ( beforeNoon ()) { return \"Morning \" + name ; } return \"Afternoon \" + name ; } public void displayTime () { System . out . println ( DateTimeFormatter . ISO_TIME . withZone ( _clock . zone ). format ( _clock . instant ())); } private boolean beforeNoon () { return LocalDateTime . ofInstant ( _clock . instant (), _clock . getZone ()). get ( ChronoField . AMPM_OF_DAY ) == 0 ; } } Normally a Greeter would be created with the no argument constructor. Since the Clock returned by Clock.systemDefaultZone() is non-deterministic, it is not suitable for automated testing. TimeSlip produces a Clock that can be configured to operated in a known way. Kotlin import java.time.Instant import com.hypercubetools.timeslip.TimeSlip fun main () { val greeter = Greeter ( TimeSlip . at ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" ))) println ( greeter . sayHello ( \"Alice\" )) println ( greeter . sayHello ( \"Bob\" )) } Java import java.time.Instant ; import com.hypercubetools.timeslip.TimeSlip ; class Example { public static void main ( String [] args ) { Greeter greeter = Greeter ( TimeSlip . at ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" ))); System . out . println ( greeter . sayHello ( \"Alice\" )); System . out . println ( greeter . sayHello ( \"Bob\" )); } } This code will always produce the following output. Mourning Alice Mourning Bob However, since applications expect time to progress forward, it is useful to produce a Clock that moves in a deterministic way. Kotlin import java.time.Duration import java.time.Instant import com.hypercubetools.timeslip.TimeSlip fun main () { val greeter = Greeter ( TimeSlip . startAt ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" ), tickAmount = Duration . ofMinutes ( 2 ))) greeter . displayTime () greeter . displayTime () greeter . displayTime () } Java import java.time.Duration ; import java.time.Instant ; import java.time.ZoneOffset ; import com.hypercubetools.timeslip.TimeSlip ; class Example { public static void main ( String [] args ) { Greeter greeter = new Greeter ( TimeSlip . startAt ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" ), ZoneOffset . UTC , Duration . ofMinutes ( 2 ))); greeter . displayTime (); greeter . displayTime (); greeter . displayTime (); } } This code will always produce the following output. 10:15:30Z 10:17:30Z 10:19:30Z Read the Usage Guide to see more detailed descriptions of the ways TimeSlip can be configured.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#installation","text":"Releases are published to bintray jcenter . It can be included in your project by including the following in your project's build configuration. Gradle dependencies { testImplementation 'com.hypercubetools:timeslip:0.1.0' } Maven <dependency> <groupId>com.hypercubetools</groupId> <artifactId>timeslip</artifactId> <version>0.1.0</version> <type>pom</type> </dependency>","title":"Installation"},{"location":"getting-started/#usage-examples","text":"Let's look at a class that uses a Clock in it's implementation. Kotlin import java.time.Clock import java.time.LocalDateTime import java.time.format.DateTimeFormatter import java.time.temporal.ChronoField class Greeter ( private val _clock : Clock = Clock . systemDefaultZone ()) { fun sayHello ( name : String ) = if ( beforeNoon ()) \"Morning $name\" else \"Afternoon $name\" fun displayTime () = println ( DateTimeFormatter . ISO_TIME . withZone ( _clock . zone ). format ( _clock . instant ())) private fun beforeNoon () = LocalDateTime . ofInstant ( _clock . instant (), _clock . zone ). get ( ChronoField . AMPM_OF_DAY ) == 0 } Java import java.time.Clock ; import java.time.LocalDateTime ; import java.time.temporal.ChronoField ; class Greeter { private final Clock _clock ; public Greeter () { this ( Clock . systemDefaultZone ()); } public Greeter ( Clock clock ) { _clock = clock ; } public String sayHello ( String name ) { if ( beforeNoon ()) { return \"Morning \" + name ; } return \"Afternoon \" + name ; } public void displayTime () { System . out . println ( DateTimeFormatter . ISO_TIME . withZone ( _clock . zone ). format ( _clock . instant ())); } private boolean beforeNoon () { return LocalDateTime . ofInstant ( _clock . instant (), _clock . getZone ()). get ( ChronoField . AMPM_OF_DAY ) == 0 ; } } Normally a Greeter would be created with the no argument constructor. Since the Clock returned by Clock.systemDefaultZone() is non-deterministic, it is not suitable for automated testing. TimeSlip produces a Clock that can be configured to operated in a known way. Kotlin import java.time.Instant import com.hypercubetools.timeslip.TimeSlip fun main () { val greeter = Greeter ( TimeSlip . at ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" ))) println ( greeter . sayHello ( \"Alice\" )) println ( greeter . sayHello ( \"Bob\" )) } Java import java.time.Instant ; import com.hypercubetools.timeslip.TimeSlip ; class Example { public static void main ( String [] args ) { Greeter greeter = Greeter ( TimeSlip . at ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" ))); System . out . println ( greeter . sayHello ( \"Alice\" )); System . out . println ( greeter . sayHello ( \"Bob\" )); } } This code will always produce the following output. Mourning Alice Mourning Bob However, since applications expect time to progress forward, it is useful to produce a Clock that moves in a deterministic way. Kotlin import java.time.Duration import java.time.Instant import com.hypercubetools.timeslip.TimeSlip fun main () { val greeter = Greeter ( TimeSlip . startAt ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" ), tickAmount = Duration . ofMinutes ( 2 ))) greeter . displayTime () greeter . displayTime () greeter . displayTime () } Java import java.time.Duration ; import java.time.Instant ; import java.time.ZoneOffset ; import com.hypercubetools.timeslip.TimeSlip ; class Example { public static void main ( String [] args ) { Greeter greeter = new Greeter ( TimeSlip . startAt ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" ), ZoneOffset . UTC , Duration . ofMinutes ( 2 ))); greeter . displayTime (); greeter . displayTime (); greeter . displayTime (); } } This code will always produce the following output. 10:15:30Z 10:17:30Z 10:19:30Z Read the Usage Guide to see more detailed descriptions of the ways TimeSlip can be configured.","title":"Usage Examples"},{"location":"history/","text":"1.0.0 (2019-07-01) \u00b6 Initial release","title":"Release Notes"},{"location":"history/#100-2019-07-01","text":"Initial release","title":"1.0.0 (2019-07-01)"},{"location":"usage-guide/","text":"Usage Guide \u00b6 The TimeSlip API is specifically designed to be easy to use from Kotlin and Java code. In most cases the Kotlin API is the same as the Java API. Unless noted, the examples below are in Kotlin. Manual Operations \u00b6 The most basic usage is setting the clock to a specific instant. These clocks will stay at this fixed point in time unless it is altered by the test case. val clock = TimeSlip . at ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" )) // Defaults to UTC val clock1 = TimeSlip . at ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" ), ZoneOffset . ofHours ( 1 )) The clock can be moved to a new instant. clock . moveTo ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" )) Or moved forward a specific amount of time. clock . tick () // 1 second clock . tick ( Duration . ofHours ( 5 )) In some situations, it might be useful to prevent the clock from providing any more values. Calling clock.done() will cause the clock to throw IllegalStateException whenever any method is called. If a test case needs to assert that the clock instance is never used. TimeSlip.noCall() is equivalent to creating an instance and immediately calling done() . Automatic Operations \u00b6 If the clock needs to progress forward, manually ticking the clock forward isn't possible when the time will be checked multiple times during the execution of a single statement of the test case. TimeSlip provides a number of ways to configure how the current instant should change after each time the current instant is accessed. The most basic way to do that is to create a clock that starts at a specific instant and ticks forward one second each time the current instant is checked. val clock = TimeSlip . startAt ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" )) // Defaults to 1 second and UTC Just like tick() , a custom tick amount can be provided. Kotlin val clock = TimeSlip . startAt ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" ), Duration . ofMinutes ( 3 )) Java Clock clock = TimeSlip . startAt ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" ), ZoneOffset . UTC , Duration . ofMinutes ( 3 )) A sequence can be provided for when the clock should tick forward automatically, but not by a fixed amount. Kotlin val clock = TimeSlip . sequence { first ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" )) then ( Instant . parse ( \"2007-12-03T10:16:00.00Z\" ), Instant . parse ( \"2007-12-03T10:17:00.00Z\" )) } Java Clock clock = TimeSlip . sequenceBuilder () . first ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" )) . then ( Instant . parse ( \"2007-12-03T10:16:00.00Z\" ), Instant . parse ( \"2007-12-03T10:17:00.00Z\" )) . build (); By default, after that last instant in the sequence it provided, it will not provide any more values as if done() was called. Alternatively, the clock can return to the start of the sequence when cycle is set to true . Advanced Operations \u00b6 If the clock needs to change values automatically, but the changes don't align with the functions already discussed, a custom callback can be passed in to calculate the next instant to provide. Note The callback to generate the next value is called while accessing the current value. This means that if the callback depends on external state, a change to that state will not be seen in the first call to instant() . The change will be seen in the second call. Kotlin var large = true val clock = TimeSlip . startAt ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" )) { initial -> initial . plus ( if ( large ) Duration . ofDays ( 10 ) else Duration . ofSeconds ( 10 )) } clock . instant () // 2007-12-03T10:15:30.00Z large = false clock . instant () // 2007-12-13T10:15:30.00Z clock . instant () // 2007-12-13T10:15:30.10Z Java boolean large = true ; Clock clock = TimeSlip . startAt ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" ), ( initial ) -> { Duration amount ; if ( large ) { amount = Duration . ofDays ( 10 ); } else { amount = Duration . ofDays ( 10 ); } return initial . plus ( amount ); }); } clock . instant (); // 2007-12-03T10:15:30.00Z large = false ; clock . instant (); // 2007-12-13T10:15:30.00Z clock . instant (); // 2007-12-13T10:15:30.10Z","title":"Usage guide"},{"location":"usage-guide/#usage-guide","text":"The TimeSlip API is specifically designed to be easy to use from Kotlin and Java code. In most cases the Kotlin API is the same as the Java API. Unless noted, the examples below are in Kotlin.","title":"Usage Guide"},{"location":"usage-guide/#manual-operations","text":"The most basic usage is setting the clock to a specific instant. These clocks will stay at this fixed point in time unless it is altered by the test case. val clock = TimeSlip . at ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" )) // Defaults to UTC val clock1 = TimeSlip . at ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" ), ZoneOffset . ofHours ( 1 )) The clock can be moved to a new instant. clock . moveTo ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" )) Or moved forward a specific amount of time. clock . tick () // 1 second clock . tick ( Duration . ofHours ( 5 )) In some situations, it might be useful to prevent the clock from providing any more values. Calling clock.done() will cause the clock to throw IllegalStateException whenever any method is called. If a test case needs to assert that the clock instance is never used. TimeSlip.noCall() is equivalent to creating an instance and immediately calling done() .","title":"Manual Operations"},{"location":"usage-guide/#automatic-operations","text":"If the clock needs to progress forward, manually ticking the clock forward isn't possible when the time will be checked multiple times during the execution of a single statement of the test case. TimeSlip provides a number of ways to configure how the current instant should change after each time the current instant is accessed. The most basic way to do that is to create a clock that starts at a specific instant and ticks forward one second each time the current instant is checked. val clock = TimeSlip . startAt ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" )) // Defaults to 1 second and UTC Just like tick() , a custom tick amount can be provided. Kotlin val clock = TimeSlip . startAt ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" ), Duration . ofMinutes ( 3 )) Java Clock clock = TimeSlip . startAt ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" ), ZoneOffset . UTC , Duration . ofMinutes ( 3 )) A sequence can be provided for when the clock should tick forward automatically, but not by a fixed amount. Kotlin val clock = TimeSlip . sequence { first ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" )) then ( Instant . parse ( \"2007-12-03T10:16:00.00Z\" ), Instant . parse ( \"2007-12-03T10:17:00.00Z\" )) } Java Clock clock = TimeSlip . sequenceBuilder () . first ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" )) . then ( Instant . parse ( \"2007-12-03T10:16:00.00Z\" ), Instant . parse ( \"2007-12-03T10:17:00.00Z\" )) . build (); By default, after that last instant in the sequence it provided, it will not provide any more values as if done() was called. Alternatively, the clock can return to the start of the sequence when cycle is set to true .","title":"Automatic Operations"},{"location":"usage-guide/#advanced-operations","text":"If the clock needs to change values automatically, but the changes don't align with the functions already discussed, a custom callback can be passed in to calculate the next instant to provide. Note The callback to generate the next value is called while accessing the current value. This means that if the callback depends on external state, a change to that state will not be seen in the first call to instant() . The change will be seen in the second call. Kotlin var large = true val clock = TimeSlip . startAt ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" )) { initial -> initial . plus ( if ( large ) Duration . ofDays ( 10 ) else Duration . ofSeconds ( 10 )) } clock . instant () // 2007-12-03T10:15:30.00Z large = false clock . instant () // 2007-12-13T10:15:30.00Z clock . instant () // 2007-12-13T10:15:30.10Z Java boolean large = true ; Clock clock = TimeSlip . startAt ( Instant . parse ( \"2007-12-03T10:15:30.00Z\" ), ( initial ) -> { Duration amount ; if ( large ) { amount = Duration . ofDays ( 10 ); } else { amount = Duration . ofDays ( 10 ); } return initial . plus ( amount ); }); } clock . instant (); // 2007-12-03T10:15:30.00Z large = false ; clock . instant (); // 2007-12-13T10:15:30.00Z clock . instant (); // 2007-12-13T10:15:30.10Z","title":"Advanced Operations"},{"location":"api/","text":"Packages \u00b6 Name Summary com.hypercubetools.timeslip Index \u00b6 All Types","title":"API"},{"location":"api/#packages","text":"Name Summary com.hypercubetools.timeslip","title":"Packages"},{"location":"api/#index","text":"All Types","title":"Index"},{"location":"api/alltypes/","text":"All Types \u00b6 Name Summary com.hypercubetools.timeslip.TickForward Produce a value based on the previous value. com.hypercubetools.timeslip.TimeSlip A concrete Clock implementation that is configurable and alterable for the purposes of reproducible tests.","title":"Home"},{"location":"api/alltypes/#all-types","text":"Name Summary com.hypercubetools.timeslip.TickForward Produce a value based on the previous value. com.hypercubetools.timeslip.TimeSlip A concrete Clock implementation that is configurable and alterable for the purposes of reproducible tests.","title":"All Types"},{"location":"api/com.hypercubetools.timeslip/","text":"com.hypercubetools.timeslip Package com.hypercubetools.timeslip \u00b6 Types \u00b6 Name Summary TimeSlip class TimeSlip : Clock A concrete Clock implementation that is configurable and alterable for the purposes of reproducible tests. Type Aliases \u00b6 Name Summary TickForward typealias TickForward = ( Instant ) -> Instant Produce a value based on the previous value.","title":"Home"},{"location":"api/com.hypercubetools.timeslip/#package-comhypercubetoolstimeslip","text":"","title":"Package com.hypercubetools.timeslip"},{"location":"api/com.hypercubetools.timeslip/#types","text":"Name Summary TimeSlip class TimeSlip : Clock A concrete Clock implementation that is configurable and alterable for the purposes of reproducible tests.","title":"Types"},{"location":"api/com.hypercubetools.timeslip/#type-aliases","text":"Name Summary TickForward typealias TickForward = ( Instant ) -> Instant Produce a value based on the previous value.","title":"Type Aliases"},{"location":"api/com.hypercubetools.timeslip/-tick-forward/","text":"com.hypercubetools.timeslip / TickForward TickForward \u00b6 typealias TickForward = ( Instant ) -> Instant Produce a value based on the previous value.","title":" tick forward"},{"location":"api/com.hypercubetools.timeslip/-tick-forward/#tickforward","text":"typealias TickForward = ( Instant ) -> Instant Produce a value based on the previous value.","title":"TickForward"},{"location":"api/com.hypercubetools.timeslip/-time-slip/","text":"com.hypercubetools.timeslip / TimeSlip TimeSlip \u00b6 class TimeSlip : Clock A concrete Clock implementation that is configurable and alterable for the purposes of reproducible tests. Types \u00b6 Name Summary SequenceBuilder class SequenceBuilder Builder for a TimeSlip instance backed by a sequence of Instant s. Functions \u00b6 Name Summary done fun done(): Unit Invalidate the clock. getZone fun getZone(): ZoneId Gets the time-zone being used to create dates and times. instant fun instant(): Instant Gets the current instant of the clock. moveTo fun moveTo(newInstant: Instant ): Unit Changes the clock to the given instant. tick fun tick(delta: Duration = ONE_SECOND): Unit Move the clock forward in time. withZone fun withZone(newZone: ZoneId ): Clock Returns a copy of this clock with a different time-zone. Companion Object Functions \u00b6 Name Summary at fun at(initialInstant: Instant , zone: ZoneId = DEFAULT_ZONE): TimeSlip Create an instance that starts at a given time and won't move unless moveTo or tick are called. noCall fun noCall(): TimeSlip Create an instance that will throw IllegalStateException whenever Clock methods are called. sequence fun sequence(body: TimeSlip.SequenceBuilder .() -> Unit ): TimeSlip Create a TimeSlip instance backed by a sequence of Instant s. sequenceBuilder fun sequenceBuilder(): TimeSlip.SequenceBuilder Create a builder for a TimeSlip instance backed by a sequence of Instant s. startAt fun startAt(initialInstant: Instant , zone: ZoneId = DEFAULT_ZONE, tickAmount: Duration = ONE_SECOND): TimeSlip Create an instance that starts at a given time, but moves forward by a constant amount each time the current time is requested. fun startAt(initialInstant: Instant , zone: ZoneId = DEFAULT_ZONE, tickForward: TickForward ): TimeSlip Create an instance that starts at a given time, but changes based on a given function each time the current time is requested.","title":"Home"},{"location":"api/com.hypercubetools.timeslip/-time-slip/#timeslip","text":"class TimeSlip : Clock A concrete Clock implementation that is configurable and alterable for the purposes of reproducible tests.","title":"TimeSlip"},{"location":"api/com.hypercubetools.timeslip/-time-slip/#types","text":"Name Summary SequenceBuilder class SequenceBuilder Builder for a TimeSlip instance backed by a sequence of Instant s.","title":"Types"},{"location":"api/com.hypercubetools.timeslip/-time-slip/#functions","text":"Name Summary done fun done(): Unit Invalidate the clock. getZone fun getZone(): ZoneId Gets the time-zone being used to create dates and times. instant fun instant(): Instant Gets the current instant of the clock. moveTo fun moveTo(newInstant: Instant ): Unit Changes the clock to the given instant. tick fun tick(delta: Duration = ONE_SECOND): Unit Move the clock forward in time. withZone fun withZone(newZone: ZoneId ): Clock Returns a copy of this clock with a different time-zone.","title":"Functions"},{"location":"api/com.hypercubetools.timeslip/-time-slip/#companion-object-functions","text":"Name Summary at fun at(initialInstant: Instant , zone: ZoneId = DEFAULT_ZONE): TimeSlip Create an instance that starts at a given time and won't move unless moveTo or tick are called. noCall fun noCall(): TimeSlip Create an instance that will throw IllegalStateException whenever Clock methods are called. sequence fun sequence(body: TimeSlip.SequenceBuilder .() -> Unit ): TimeSlip Create a TimeSlip instance backed by a sequence of Instant s. sequenceBuilder fun sequenceBuilder(): TimeSlip.SequenceBuilder Create a builder for a TimeSlip instance backed by a sequence of Instant s. startAt fun startAt(initialInstant: Instant , zone: ZoneId = DEFAULT_ZONE, tickAmount: Duration = ONE_SECOND): TimeSlip Create an instance that starts at a given time, but moves forward by a constant amount each time the current time is requested. fun startAt(initialInstant: Instant , zone: ZoneId = DEFAULT_ZONE, tickForward: TickForward ): TimeSlip Create an instance that starts at a given time, but changes based on a given function each time the current time is requested.","title":"Companion Object Functions"},{"location":"api/com.hypercubetools.timeslip/-time-slip/at/","text":"com.hypercubetools.timeslip / TimeSlip / at at \u00b6 @JvmStatic @JvmOverloads fun at(initialInstant: Instant , zone: ZoneId = DEFAULT_ZONE): TimeSlip Create an instance that starts at a given time and won't move unless moveTo or tick are called. Parameters \u00b6 initialInstant - The time the instance is initially set to. zone - The time-zone the instance should be based in. Defaults to UTC. Return A newly constructed instance.","title":"At"},{"location":"api/com.hypercubetools.timeslip/-time-slip/at/#at","text":"@JvmStatic @JvmOverloads fun at(initialInstant: Instant , zone: ZoneId = DEFAULT_ZONE): TimeSlip Create an instance that starts at a given time and won't move unless moveTo or tick are called.","title":"at"},{"location":"api/com.hypercubetools.timeslip/-time-slip/at/#parameters","text":"initialInstant - The time the instance is initially set to. zone - The time-zone the instance should be based in. Defaults to UTC. Return A newly constructed instance.","title":"Parameters"},{"location":"api/com.hypercubetools.timeslip/-time-slip/done/","text":"com.hypercubetools.timeslip / TimeSlip / done done \u00b6 fun done(): Unit Invalidate the clock. Any method calls will throw IllegalStateException after this is called.","title":"Done"},{"location":"api/com.hypercubetools.timeslip/-time-slip/done/#done","text":"fun done(): Unit Invalidate the clock. Any method calls will throw IllegalStateException after this is called.","title":"done"},{"location":"api/com.hypercubetools.timeslip/-time-slip/get-zone/","text":"com.hypercubetools.timeslip / TimeSlip / getZone getZone \u00b6 fun getZone(): ZoneId Gets the time-zone being used to create dates and times. Exceptions \u00b6 IllegalStateException - This clock doesn't have any more times to provide. Return the time-zone being used to interpret instants","title":"Get zone"},{"location":"api/com.hypercubetools.timeslip/-time-slip/get-zone/#getzone","text":"fun getZone(): ZoneId Gets the time-zone being used to create dates and times.","title":"getZone"},{"location":"api/com.hypercubetools.timeslip/-time-slip/get-zone/#exceptions","text":"IllegalStateException - This clock doesn't have any more times to provide. Return the time-zone being used to interpret instants","title":"Exceptions"},{"location":"api/com.hypercubetools.timeslip/-time-slip/instant/","text":"com.hypercubetools.timeslip / TimeSlip / instant instant \u00b6 fun instant(): Instant Gets the current instant of the clock. Exceptions \u00b6 IllegalStateException - This clock doesn't have any more times to provide. Return the current instant from this clock","title":"Instant"},{"location":"api/com.hypercubetools.timeslip/-time-slip/instant/#instant","text":"fun instant(): Instant Gets the current instant of the clock.","title":"instant"},{"location":"api/com.hypercubetools.timeslip/-time-slip/instant/#exceptions","text":"IllegalStateException - This clock doesn't have any more times to provide. Return the current instant from this clock","title":"Exceptions"},{"location":"api/com.hypercubetools.timeslip/-time-slip/move-to/","text":"com.hypercubetools.timeslip / TimeSlip / moveTo moveTo \u00b6 fun moveTo(newInstant: Instant ): Unit Changes the clock to the given instant. Parameters \u00b6 newInstant - the new instant for the clock. Exceptions \u00b6 IllegalStateException - sequence was used to create this instance.","title":"Move to"},{"location":"api/com.hypercubetools.timeslip/-time-slip/move-to/#moveto","text":"fun moveTo(newInstant: Instant ): Unit Changes the clock to the given instant.","title":"moveTo"},{"location":"api/com.hypercubetools.timeslip/-time-slip/move-to/#parameters","text":"newInstant - the new instant for the clock.","title":"Parameters"},{"location":"api/com.hypercubetools.timeslip/-time-slip/move-to/#exceptions","text":"IllegalStateException - sequence was used to create this instance.","title":"Exceptions"},{"location":"api/com.hypercubetools.timeslip/-time-slip/no-call/","text":"com.hypercubetools.timeslip / TimeSlip / noCall noCall \u00b6 @JvmStatic fun noCall(): TimeSlip Create an instance that will throw IllegalStateException whenever Clock methods are called. This can be useful for asserting that Clock methods are not called. Return A newly constructed instance.","title":"No call"},{"location":"api/com.hypercubetools.timeslip/-time-slip/no-call/#nocall","text":"@JvmStatic fun noCall(): TimeSlip Create an instance that will throw IllegalStateException whenever Clock methods are called. This can be useful for asserting that Clock methods are not called. Return A newly constructed instance.","title":"noCall"},{"location":"api/com.hypercubetools.timeslip/-time-slip/sequence-builder/","text":"com.hypercubetools.timeslip / TimeSlip / sequenceBuilder sequenceBuilder \u00b6 @JvmStatic fun sequenceBuilder(): TimeSlip.SequenceBuilder Create a builder for a TimeSlip instance backed by a sequence of Instant s.","title":"Sequence builder"},{"location":"api/com.hypercubetools.timeslip/-time-slip/sequence-builder/#sequencebuilder","text":"@JvmStatic fun sequenceBuilder(): TimeSlip.SequenceBuilder Create a builder for a TimeSlip instance backed by a sequence of Instant s.","title":"sequenceBuilder"},{"location":"api/com.hypercubetools.timeslip/-time-slip/sequence/","text":"com.hypercubetools.timeslip / TimeSlip / sequence sequence \u00b6 fun sequence(body: TimeSlip.SequenceBuilder .() -> Unit ): TimeSlip Create a TimeSlip instance backed by a sequence of Instant s. Parameters \u00b6 body - Initialization steps of SequenceBuilder . Exceptions \u00b6 IllegalStateException - No Instant s were added to the builder. Use noCall to create a TimeSlip that does not produce any times. Return A newly constructed instance.","title":"Sequence"},{"location":"api/com.hypercubetools.timeslip/-time-slip/sequence/#sequence","text":"fun sequence(body: TimeSlip.SequenceBuilder .() -> Unit ): TimeSlip Create a TimeSlip instance backed by a sequence of Instant s.","title":"sequence"},{"location":"api/com.hypercubetools.timeslip/-time-slip/sequence/#parameters","text":"body - Initialization steps of SequenceBuilder .","title":"Parameters"},{"location":"api/com.hypercubetools.timeslip/-time-slip/sequence/#exceptions","text":"IllegalStateException - No Instant s were added to the builder. Use noCall to create a TimeSlip that does not produce any times. Return A newly constructed instance.","title":"Exceptions"},{"location":"api/com.hypercubetools.timeslip/-time-slip/start-at/","text":"com.hypercubetools.timeslip / TimeSlip / startAt startAt \u00b6 @JvmStatic @JvmOverloads fun startAt(initialInstant: Instant , zone: ZoneId = DEFAULT_ZONE, tickAmount: Duration = ONE_SECOND): TimeSlip Create an instance that starts at a given time, but moves forward by a constant amount each time the current time is requested. Parameters \u00b6 initialInstant - The time the instance is initially set to. zone - The time-zone the instance should be based in. Defaults to UTC. tickAmount - The amount of time that should be added to the previous time to calculate the current time. If desired, a negative value can be used to move the time backwards instead of forwards. Return A newly constructed instance. @JvmStatic @JvmOverloads fun startAt(initialInstant: Instant , zone: ZoneId = DEFAULT_ZONE, tickForward: TickForward ): TimeSlip Create an instance that starts at a given time, but changes based on a given function each time the current time is requested. Parameters \u00b6 initialInstant - The time the instance is initially set to. zone - The time-zone the instance should be based in. Defaults to UTC. tickForward - A function that specifies how the clock's time should change when the time is requested. This is called immediately after a value is requested. So when the first time is requested, this function will be called to to pre-load the next time to return. This should be considered if this function has any side effects. Return A newly constructed instance.","title":"Start at"},{"location":"api/com.hypercubetools.timeslip/-time-slip/start-at/#startat","text":"@JvmStatic @JvmOverloads fun startAt(initialInstant: Instant , zone: ZoneId = DEFAULT_ZONE, tickAmount: Duration = ONE_SECOND): TimeSlip Create an instance that starts at a given time, but moves forward by a constant amount each time the current time is requested.","title":"startAt"},{"location":"api/com.hypercubetools.timeslip/-time-slip/start-at/#parameters","text":"initialInstant - The time the instance is initially set to. zone - The time-zone the instance should be based in. Defaults to UTC. tickAmount - The amount of time that should be added to the previous time to calculate the current time. If desired, a negative value can be used to move the time backwards instead of forwards. Return A newly constructed instance. @JvmStatic @JvmOverloads fun startAt(initialInstant: Instant , zone: ZoneId = DEFAULT_ZONE, tickForward: TickForward ): TimeSlip Create an instance that starts at a given time, but changes based on a given function each time the current time is requested.","title":"Parameters"},{"location":"api/com.hypercubetools.timeslip/-time-slip/start-at/#parameters_1","text":"initialInstant - The time the instance is initially set to. zone - The time-zone the instance should be based in. Defaults to UTC. tickForward - A function that specifies how the clock's time should change when the time is requested. This is called immediately after a value is requested. So when the first time is requested, this function will be called to to pre-load the next time to return. This should be considered if this function has any side effects. Return A newly constructed instance.","title":"Parameters"},{"location":"api/com.hypercubetools.timeslip/-time-slip/tick/","text":"com.hypercubetools.timeslip / TimeSlip / tick tick \u00b6 @JvmOverloads fun tick(delta: Duration = ONE_SECOND): Unit Move the clock forward in time. Parameters \u00b6 delta - the amount time to move forward. A negative duration will move the clock backwards. Defaults to 1 second. Exceptions \u00b6 IllegalStateException - sequence was used to create this instance.","title":"Tick"},{"location":"api/com.hypercubetools.timeslip/-time-slip/tick/#tick","text":"@JvmOverloads fun tick(delta: Duration = ONE_SECOND): Unit Move the clock forward in time.","title":"tick"},{"location":"api/com.hypercubetools.timeslip/-time-slip/tick/#parameters","text":"delta - the amount time to move forward. A negative duration will move the clock backwards. Defaults to 1 second.","title":"Parameters"},{"location":"api/com.hypercubetools.timeslip/-time-slip/tick/#exceptions","text":"IllegalStateException - sequence was used to create this instance.","title":"Exceptions"},{"location":"api/com.hypercubetools.timeslip/-time-slip/with-zone/","text":"com.hypercubetools.timeslip / TimeSlip / withZone withZone \u00b6 fun withZone(newZone: ZoneId ): Clock Returns a copy of this clock with a different time-zone. Parameters \u00b6 newZone - the time-zone to change to Exceptions \u00b6 IllegalStateException - This clock doesn't have any more times to provide. Return a clock based on this clock with the specified time-zone","title":"With zone"},{"location":"api/com.hypercubetools.timeslip/-time-slip/with-zone/#withzone","text":"fun withZone(newZone: ZoneId ): Clock Returns a copy of this clock with a different time-zone.","title":"withZone"},{"location":"api/com.hypercubetools.timeslip/-time-slip/with-zone/#parameters","text":"newZone - the time-zone to change to","title":"Parameters"},{"location":"api/com.hypercubetools.timeslip/-time-slip/with-zone/#exceptions","text":"IllegalStateException - This clock doesn't have any more times to provide. Return a clock based on this clock with the specified time-zone","title":"Exceptions"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/","text":"com.hypercubetools.timeslip / TimeSlip / SequenceBuilder SequenceBuilder \u00b6 class SequenceBuilder Builder for a TimeSlip instance backed by a sequence of Instant s. Constructors \u00b6 Name Summary <init> SequenceBuilder() Builder for a TimeSlip instance backed by a sequence of Instant s. Properties \u00b6 Name Summary cycle var cycle: Boolean When true , after returning the last Instant in the sequence, the next sequence will repeat again from the first Instant . When false , after returning the last Instant in the sequence, IllegalStateException will be thrown the next time the time is requested. zone var zone: ZoneId Zone Id to be used by Clock . Defaults to UTC. Functions \u00b6 Name Summary build fun build(): TimeSlip Construct a TimeSlip instance that will provide Instant s based on the configured sequence. cycle fun cycle(shouldCycle: Boolean ): TimeSlip.SequenceBuilder Specify if the sequence should repeat. first fun first(vararg instants: Instant ): TimeSlip.SequenceBuilder fun first(instants: Collection < Instant >): TimeSlip.SequenceBuilder Prepend a number of instants to the start of the sequence of instants. then fun then(vararg instants: Instant ): TimeSlip.SequenceBuilder fun then(instants: Collection < Instant >): TimeSlip.SequenceBuilder Apend a number of instants to the end of the sequence of instants. zone fun zone(zoneId: ZoneId ): TimeSlip.SequenceBuilder Set the zone Id to be used by Clock .","title":"Home"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/#sequencebuilder","text":"class SequenceBuilder Builder for a TimeSlip instance backed by a sequence of Instant s.","title":"SequenceBuilder"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/#constructors","text":"Name Summary <init> SequenceBuilder() Builder for a TimeSlip instance backed by a sequence of Instant s.","title":"Constructors"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/#properties","text":"Name Summary cycle var cycle: Boolean When true , after returning the last Instant in the sequence, the next sequence will repeat again from the first Instant . When false , after returning the last Instant in the sequence, IllegalStateException will be thrown the next time the time is requested. zone var zone: ZoneId Zone Id to be used by Clock . Defaults to UTC.","title":"Properties"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/#functions","text":"Name Summary build fun build(): TimeSlip Construct a TimeSlip instance that will provide Instant s based on the configured sequence. cycle fun cycle(shouldCycle: Boolean ): TimeSlip.SequenceBuilder Specify if the sequence should repeat. first fun first(vararg instants: Instant ): TimeSlip.SequenceBuilder fun first(instants: Collection < Instant >): TimeSlip.SequenceBuilder Prepend a number of instants to the start of the sequence of instants. then fun then(vararg instants: Instant ): TimeSlip.SequenceBuilder fun then(instants: Collection < Instant >): TimeSlip.SequenceBuilder Apend a number of instants to the end of the sequence of instants. zone fun zone(zoneId: ZoneId ): TimeSlip.SequenceBuilder Set the zone Id to be used by Clock .","title":"Functions"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/-init-/","text":"com.hypercubetools.timeslip / TimeSlip / SequenceBuilder / <init> <init> \u00b6 SequenceBuilder() Builder for a TimeSlip instance backed by a sequence of Instant s.","title":" init "},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/-init-/#init","text":"SequenceBuilder() Builder for a TimeSlip instance backed by a sequence of Instant s.","title":"&lt;init&gt;"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/build/","text":"com.hypercubetools.timeslip / TimeSlip / SequenceBuilder / build build \u00b6 fun build(): TimeSlip Construct a TimeSlip instance that will provide Instant s based on the configured sequence. Exceptions \u00b6 IllegalStateException - No Instant s were added to the builder. Use noCall to create a TimeSlip that does not produce any times. Return A newly constructed instance.","title":"Build"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/build/#build","text":"fun build(): TimeSlip Construct a TimeSlip instance that will provide Instant s based on the configured sequence.","title":"build"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/build/#exceptions","text":"IllegalStateException - No Instant s were added to the builder. Use noCall to create a TimeSlip that does not produce any times. Return A newly constructed instance.","title":"Exceptions"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/cycle/","text":"com.hypercubetools.timeslip / TimeSlip / SequenceBuilder / cycle cycle \u00b6 var cycle: Boolean When true , after returning the last Instant in the sequence, the next sequence will repeat again from the first Instant . When false , after returning the last Instant in the sequence, IllegalStateException will be thrown the next time the time is requested. fun cycle(shouldCycle: Boolean ): TimeSlip.SequenceBuilder Specify if the sequence should repeat. Parameters \u00b6 shouldCycle - When true , after returning the last Instant in the sequence, the next sequence will repeat again from the first Instant . When false , after returning the last Instant in the sequence, IllegalStateException will be thrown the next time the time is requested. Return This builder.","title":"Cycle"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/cycle/#cycle","text":"var cycle: Boolean When true , after returning the last Instant in the sequence, the next sequence will repeat again from the first Instant . When false , after returning the last Instant in the sequence, IllegalStateException will be thrown the next time the time is requested. fun cycle(shouldCycle: Boolean ): TimeSlip.SequenceBuilder Specify if the sequence should repeat.","title":"cycle"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/cycle/#parameters","text":"shouldCycle - When true , after returning the last Instant in the sequence, the next sequence will repeat again from the first Instant . When false , after returning the last Instant in the sequence, IllegalStateException will be thrown the next time the time is requested. Return This builder.","title":"Parameters"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/first/","text":"com.hypercubetools.timeslip / TimeSlip / SequenceBuilder / first first \u00b6 fun first(vararg instants: Instant ): TimeSlip.SequenceBuilder fun first(instants: Collection < Instant >): TimeSlip.SequenceBuilder Prepend a number of instants to the start of the sequence of instants. Parameters \u00b6 instants - Instants to add to the sequence. Return This builder.","title":"First"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/first/#first","text":"fun first(vararg instants: Instant ): TimeSlip.SequenceBuilder fun first(instants: Collection < Instant >): TimeSlip.SequenceBuilder Prepend a number of instants to the start of the sequence of instants.","title":"first"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/first/#parameters","text":"instants - Instants to add to the sequence. Return This builder.","title":"Parameters"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/then/","text":"com.hypercubetools.timeslip / TimeSlip / SequenceBuilder / then then \u00b6 fun then(vararg instants: Instant ): TimeSlip.SequenceBuilder fun then(instants: Collection < Instant >): TimeSlip.SequenceBuilder Apend a number of instants to the end of the sequence of instants. Parameters \u00b6 instants - Instants to add to the sequence. Return This builder.","title":"Then"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/then/#then","text":"fun then(vararg instants: Instant ): TimeSlip.SequenceBuilder fun then(instants: Collection < Instant >): TimeSlip.SequenceBuilder Apend a number of instants to the end of the sequence of instants.","title":"then"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/then/#parameters","text":"instants - Instants to add to the sequence. Return This builder.","title":"Parameters"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/zone/","text":"com.hypercubetools.timeslip / TimeSlip / SequenceBuilder / zone zone \u00b6 var zone: ZoneId Zone Id to be used by Clock . Defaults to UTC. fun zone(zoneId: ZoneId ): TimeSlip.SequenceBuilder Set the zone Id to be used by Clock . Parameters \u00b6 zoneId - The zone id to use. Return This builder.","title":"Zone"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/zone/#zone","text":"var zone: ZoneId Zone Id to be used by Clock . Defaults to UTC. fun zone(zoneId: ZoneId ): TimeSlip.SequenceBuilder Set the zone Id to be used by Clock .","title":"zone"},{"location":"api/com.hypercubetools.timeslip/-time-slip/-sequence-builder/zone/#parameters","text":"zoneId - The zone id to use. Return This builder.","title":"Parameters"}]}